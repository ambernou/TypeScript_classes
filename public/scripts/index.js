import { renderSearchFormBlock } from './search-form.js';
import { renderSearchStubBlock } from './search-results.js';
import { renderUserBlock } from './user.js';
import { renderToast } from './lib.js';
const checkInDate = new Date();
checkInDate.setDate(checkInDate.getDate() + 1);
const checkOutDate = new Date();
checkOutDate.setDate(checkInDate.getDate() + 2);
// ДЗ 2, задание 1:
class userclass {
    constructor(userName, avatarSrc) {
        this.userName = userName,
            this.avatarSrc = avatarSrc;
    }
}
const user = new userclass('WadeWarren', 'img/avatar.png');
localStorage.setItem('user', JSON.stringify(user));
localStorage.setItem('favoritesAmount', '2');
function getUserData(key) {
    const userInfo = JSON.parse(localStorage.getItem(key));
    // Попытка повторить логику с урока, где был class Book и функция serialize с instanceof, не сработала :(
    if (typeof userInfo === 'object') {
        return userInfo;
    }
    else {
        console.log('error userInfo');
    }
}
function getFavoritesAmount(key) {
    const userInfo = JSON.parse(localStorage.getItem(key));
    if (typeof userInfo === 'number') {
        return userInfo;
    }
    else {
        console.log('error amount');
    }
}
const userName = getUserData('user').userName;
const avatarSrc = getUserData('user').avatarSrc;
const favoriteItemsAmount = getFavoritesAmount('favoritesAmount');
window.addEventListener('DOMContentLoaded', () => {
    renderUserBlock(userName, avatarSrc, favoriteItemsAmount);
    renderSearchFormBlock(checkInDate, checkOutDate);
    renderSearchStubBlock();
    renderToast({ text: 'Это пример уведомления. Используйте его при необходимости', type: 'success' }, { name: 'Понял', handler: () => { console.log('Уведомление закрыто'); } });
    // ДЗ 2, задание 2:
    const btn = document.getElementById('search-btn');
    btn.addEventListener('click', clickHandler);
    function clickHandler(e) {
        e.preventDefault();
        const data = {
            city: document.getElementById('city').value,
            checkInDate: document.getElementById('check-in-date').value,
            checkOutDate: document.getElementById('check-out-date').value,
            maxPrice: document.getElementById('max-price').value
        };
        // console.log(data.city, data.checkInDate, data.checkOutDate, data.maxPrice)
        search(data);
    }
    function search(data) {
        console.log(data);
    }
});
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiaW5kZXguanMiLCJzb3VyY2VSb290IjoiIiwic291cmNlcyI6WyIuLi8uLi9zcmMvaW5kZXgudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IkFBQUEsT0FBTyxFQUFFLHFCQUFxQixFQUFFLE1BQU0sa0JBQWtCLENBQUE7QUFDeEQsT0FBTyxFQUFFLHFCQUFxQixFQUFFLE1BQU0scUJBQXFCLENBQUE7QUFDM0QsT0FBTyxFQUFFLGVBQWUsRUFBRSxNQUFNLFdBQVcsQ0FBQTtBQUMzQyxPQUFPLEVBQUUsV0FBVyxFQUFFLE1BQU0sVUFBVSxDQUFBO0FBR3RDLE1BQU0sV0FBVyxHQUFHLElBQUksSUFBSSxFQUFFLENBQUE7QUFDOUIsV0FBVyxDQUFDLE9BQU8sQ0FBQyxXQUFXLENBQUMsT0FBTyxFQUFFLEdBQUcsQ0FBQyxDQUFDLENBQUE7QUFFOUMsTUFBTSxZQUFZLEdBQUcsSUFBSSxJQUFJLEVBQUUsQ0FBQTtBQUMvQixZQUFZLENBQUMsT0FBTyxDQUFDLFdBQVcsQ0FBQyxPQUFPLEVBQUUsR0FBRyxDQUFDLENBQUMsQ0FBQTtBQUUvQyxtQkFBbUI7QUFFbkIsTUFBTSxTQUFTO0lBR2IsWUFBYSxRQUFnQixFQUFFLFNBQWlCO1FBQzlDLElBQUksQ0FBQyxRQUFRLEdBQUcsUUFBUTtZQUN4QixJQUFJLENBQUMsU0FBUyxHQUFHLFNBQVMsQ0FBQTtJQUM1QixDQUFDO0NBQ0Y7QUFFRCxNQUFNLElBQUksR0FBRyxJQUFJLFNBQVMsQ0FBQyxZQUFZLEVBQUUsZ0JBQWdCLENBQUMsQ0FBQTtBQUUxRCxZQUFZLENBQUMsT0FBTyxDQUFDLE1BQU0sRUFBRSxJQUFJLENBQUMsU0FBUyxDQUFDLElBQUksQ0FBQyxDQUFDLENBQUE7QUFDbEQsWUFBWSxDQUFDLE9BQU8sQ0FBQyxpQkFBaUIsRUFBRSxHQUFHLENBQUMsQ0FBQTtBQUU1QyxTQUFTLFdBQVcsQ0FBRSxHQUFXO0lBQy9CLE1BQU0sUUFBUSxHQUFZLElBQUksQ0FBQyxLQUFLLENBQUMsWUFBWSxDQUFDLE9BQU8sQ0FBQyxHQUFHLENBQUMsQ0FBQyxDQUFBO0lBQy9ELHlHQUF5RztJQUN6RyxJQUFJLE9BQU8sUUFBUSxLQUFLLFFBQVEsRUFBRTtRQUNoQyxPQUFPLFFBQXFCLENBQUE7S0FDN0I7U0FBTTtRQUNMLE9BQU8sQ0FBQyxHQUFHLENBQUMsZ0JBQWdCLENBQUMsQ0FBQTtLQUM5QjtBQUNILENBQUM7QUFFRCxTQUFTLGtCQUFrQixDQUFFLEdBQVc7SUFDdEMsTUFBTSxRQUFRLEdBQVksSUFBSSxDQUFDLEtBQUssQ0FBQyxZQUFZLENBQUMsT0FBTyxDQUFDLEdBQUcsQ0FBQyxDQUFDLENBQUE7SUFDL0QsSUFBSSxPQUFPLFFBQVEsS0FBSyxRQUFRLEVBQUU7UUFDaEMsT0FBTyxRQUFRLENBQUE7S0FDaEI7U0FBTTtRQUNMLE9BQU8sQ0FBQyxHQUFHLENBQUMsY0FBYyxDQUFDLENBQUE7S0FDNUI7QUFDSCxDQUFDO0FBRUQsTUFBTSxRQUFRLEdBQUcsV0FBVyxDQUFDLE1BQU0sQ0FBQyxDQUFDLFFBQVEsQ0FBQTtBQUM3QyxNQUFNLFNBQVMsR0FBRyxXQUFXLENBQUMsTUFBTSxDQUFDLENBQUMsU0FBUyxDQUFBO0FBQy9DLE1BQU0sbUJBQW1CLEdBQUcsa0JBQWtCLENBQUMsaUJBQWlCLENBQUMsQ0FBQTtBQUVqRSxNQUFNLENBQUMsZ0JBQWdCLENBQUMsa0JBQWtCLEVBQUUsR0FBRyxFQUFFO0lBQy9DLGVBQWUsQ0FBQyxRQUFRLEVBQUUsU0FBUyxFQUFFLG1CQUFtQixDQUFDLENBQUE7SUFDekQscUJBQXFCLENBQUMsV0FBVyxFQUFFLFlBQVksQ0FBQyxDQUFBO0lBQ2hELHFCQUFxQixFQUFFLENBQUE7SUFDdkIsV0FBVyxDQUNULEVBQUMsSUFBSSxFQUFFLDJEQUEyRCxFQUFFLElBQUksRUFBRSxTQUFTLEVBQUMsRUFDcEYsRUFBQyxJQUFJLEVBQUUsT0FBTyxFQUFFLE9BQU8sRUFBRSxHQUFHLEVBQUUsR0FBRSxPQUFPLENBQUMsR0FBRyxDQUFDLHFCQUFxQixDQUFDLENBQUEsQ0FBQSxDQUFDLEVBQUMsQ0FDckUsQ0FBQTtJQUVELG1CQUFtQjtJQUNuQixNQUFNLEdBQUcsR0FBRyxRQUFRLENBQUMsY0FBYyxDQUFDLFlBQVksQ0FBQyxDQUFBO0lBQ2pELEdBQUcsQ0FBQyxnQkFBZ0IsQ0FBQyxPQUFPLEVBQUUsWUFBWSxDQUFDLENBQUE7SUFFM0MsU0FBUyxZQUFZLENBQUUsQ0FBQztRQUN0QixDQUFDLENBQUMsY0FBYyxFQUFFLENBQUE7UUFDbEIsTUFBTSxJQUFJLEdBQW1CO1lBQzNCLElBQUksRUFBRyxRQUFRLENBQUMsY0FBYyxDQUFDLE1BQU0sQ0FBc0IsQ0FBQyxLQUFLO1lBQ2pFLFdBQVcsRUFBRyxRQUFRLENBQUMsY0FBYyxDQUFDLGVBQWUsQ0FBc0IsQ0FBQyxLQUFLO1lBQ2pGLFlBQVksRUFBRyxRQUFRLENBQUMsY0FBYyxDQUFDLGdCQUFnQixDQUFzQixDQUFDLEtBQUs7WUFDbkYsUUFBUSxFQUFHLFFBQVEsQ0FBQyxjQUFjLENBQUMsV0FBVyxDQUFzQixDQUFDLEtBQUs7U0FDM0UsQ0FBQTtRQUNELDZFQUE2RTtRQUM3RSxNQUFNLENBQUMsSUFBSSxDQUFDLENBQUE7SUFDZCxDQUFDO0lBRUQsU0FBUyxNQUFNLENBQUUsSUFBb0I7UUFDbkMsT0FBTyxDQUFDLEdBQUcsQ0FBQyxJQUFJLENBQUMsQ0FBQTtJQUNuQixDQUFDO0FBQ0gsQ0FBQyxDQUFDLENBQUEiLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQgeyByZW5kZXJTZWFyY2hGb3JtQmxvY2sgfSBmcm9tICcuL3NlYXJjaC1mb3JtLmpzJ1xuaW1wb3J0IHsgcmVuZGVyU2VhcmNoU3R1YkJsb2NrIH0gZnJvbSAnLi9zZWFyY2gtcmVzdWx0cy5qcydcbmltcG9ydCB7IHJlbmRlclVzZXJCbG9jayB9IGZyb20gJy4vdXNlci5qcydcbmltcG9ydCB7IHJlbmRlclRvYXN0IH0gZnJvbSAnLi9saWIuanMnXG5pbXBvcnQgeyBTZWFyY2hGb3JtRGF0YSB9IGZyb20gJy4vc2VhcmNoRm9ybURhdGEuanMnXG5cbmNvbnN0IGNoZWNrSW5EYXRlID0gbmV3IERhdGUoKVxuY2hlY2tJbkRhdGUuc2V0RGF0ZShjaGVja0luRGF0ZS5nZXREYXRlKCkgKyAxKVxuXG5jb25zdCBjaGVja091dERhdGUgPSBuZXcgRGF0ZSgpXG5jaGVja091dERhdGUuc2V0RGF0ZShjaGVja0luRGF0ZS5nZXREYXRlKCkgKyAyKVxuXG4vLyDQlNCXIDIsINC30LDQtNCw0L3QuNC1IDE6XG5cbmNsYXNzIHVzZXJjbGFzcyB7XG4gIHVzZXJOYW1lOiBzdHJpbmdcbiAgYXZhdGFyU3JjOiBzdHJpbmdcbiAgY29uc3RydWN0b3IgKHVzZXJOYW1lOiBzdHJpbmcsIGF2YXRhclNyYzogc3RyaW5nKSB7XG4gICAgdGhpcy51c2VyTmFtZSA9IHVzZXJOYW1lLFxuICAgIHRoaXMuYXZhdGFyU3JjID0gYXZhdGFyU3JjXG4gIH1cbn1cblxuY29uc3QgdXNlciA9IG5ldyB1c2VyY2xhc3MoJ1dhZGVXYXJyZW4nLCAnaW1nL2F2YXRhci5wbmcnKVxuXG5sb2NhbFN0b3JhZ2Uuc2V0SXRlbSgndXNlcicsIEpTT04uc3RyaW5naWZ5KHVzZXIpKVxubG9jYWxTdG9yYWdlLnNldEl0ZW0oJ2Zhdm9yaXRlc0Ftb3VudCcsICcyJylcblxuZnVuY3Rpb24gZ2V0VXNlckRhdGEgKGtleTogc3RyaW5nKSB7XG4gIGNvbnN0IHVzZXJJbmZvOiB1bmtub3duID0gSlNPTi5wYXJzZShsb2NhbFN0b3JhZ2UuZ2V0SXRlbShrZXkpKVxuICAvLyDQn9C+0L/Ri9GC0LrQsCDQv9C+0LLRgtC+0YDQuNGC0Ywg0LvQvtCz0LjQutGDINGBINGD0YDQvtC60LAsINCz0LTQtSDQsdGL0LsgY2xhc3MgQm9vayDQuCDRhNGD0L3QutGG0LjRjyBzZXJpYWxpemUg0YEgaW5zdGFuY2VvZiwg0L3QtSDRgdGA0LDQsdC+0YLQsNC70LAgOihcbiAgaWYgKHR5cGVvZiB1c2VySW5mbyA9PT0gJ29iamVjdCcpIHsgXG4gICAgcmV0dXJuIHVzZXJJbmZvIGFzIHVzZXJjbGFzc1xuICB9IGVsc2Uge1xuICAgIGNvbnNvbGUubG9nKCdlcnJvciB1c2VySW5mbycpXG4gIH1cbn1cblxuZnVuY3Rpb24gZ2V0RmF2b3JpdGVzQW1vdW50IChrZXk6IHN0cmluZykge1xuICBjb25zdCB1c2VySW5mbzogdW5rbm93biA9IEpTT04ucGFyc2UobG9jYWxTdG9yYWdlLmdldEl0ZW0oa2V5KSlcbiAgaWYgKHR5cGVvZiB1c2VySW5mbyA9PT0gJ251bWJlcicpIHtcbiAgICByZXR1cm4gdXNlckluZm9cbiAgfSBlbHNlIHtcbiAgICBjb25zb2xlLmxvZygnZXJyb3IgYW1vdW50JylcbiAgfVxufVxuXG5jb25zdCB1c2VyTmFtZSA9IGdldFVzZXJEYXRhKCd1c2VyJykudXNlck5hbWVcbmNvbnN0IGF2YXRhclNyYyA9IGdldFVzZXJEYXRhKCd1c2VyJykuYXZhdGFyU3JjXG5jb25zdCBmYXZvcml0ZUl0ZW1zQW1vdW50ID0gZ2V0RmF2b3JpdGVzQW1vdW50KCdmYXZvcml0ZXNBbW91bnQnKVxuXG53aW5kb3cuYWRkRXZlbnRMaXN0ZW5lcignRE9NQ29udGVudExvYWRlZCcsICgpID0+IHtcbiAgcmVuZGVyVXNlckJsb2NrKHVzZXJOYW1lLCBhdmF0YXJTcmMsIGZhdm9yaXRlSXRlbXNBbW91bnQpXG4gIHJlbmRlclNlYXJjaEZvcm1CbG9jayhjaGVja0luRGF0ZSwgY2hlY2tPdXREYXRlKVxuICByZW5kZXJTZWFyY2hTdHViQmxvY2soKVxuICByZW5kZXJUb2FzdChcbiAgICB7dGV4dDogJ9Ct0YLQviDQv9GA0LjQvNC10YAg0YPQstC10LTQvtC80LvQtdC90LjRjy4g0JjRgdC/0L7Qu9GM0LfRg9C50YLQtSDQtdCz0L4g0L/RgNC4INC90LXQvtCx0YXQvtC00LjQvNC+0YHRgtC4JywgdHlwZTogJ3N1Y2Nlc3MnfSxcbiAgICB7bmFtZTogJ9Cf0L7QvdGP0LsnLCBoYW5kbGVyOiAoKSA9PiB7Y29uc29sZS5sb2coJ9Cj0LLQtdC00L7QvNC70LXQvdC40LUg0LfQsNC60YDRi9GC0L4nKX19XG4gIClcblxuICAvLyDQlNCXIDIsINC30LDQtNCw0L3QuNC1IDI6XG4gIGNvbnN0IGJ0biA9IGRvY3VtZW50LmdldEVsZW1lbnRCeUlkKCdzZWFyY2gtYnRuJylcbiAgYnRuLmFkZEV2ZW50TGlzdGVuZXIoJ2NsaWNrJywgY2xpY2tIYW5kbGVyKVxuXG4gIGZ1bmN0aW9uIGNsaWNrSGFuZGxlciAoZSkge1xuICAgIGUucHJldmVudERlZmF1bHQoKVxuICAgIGNvbnN0IGRhdGE6IFNlYXJjaEZvcm1EYXRhID0ge1xuICAgICAgY2l0eTogKGRvY3VtZW50LmdldEVsZW1lbnRCeUlkKCdjaXR5JykgYXMgSFRNTElucHV0RWxlbWVudCkudmFsdWUsXG4gICAgICBjaGVja0luRGF0ZTogKGRvY3VtZW50LmdldEVsZW1lbnRCeUlkKCdjaGVjay1pbi1kYXRlJykgYXMgSFRNTElucHV0RWxlbWVudCkudmFsdWUsXG4gICAgICBjaGVja091dERhdGU6IChkb2N1bWVudC5nZXRFbGVtZW50QnlJZCgnY2hlY2stb3V0LWRhdGUnKSBhcyBIVE1MSW5wdXRFbGVtZW50KS52YWx1ZSxcbiAgICAgIG1heFByaWNlOiAoZG9jdW1lbnQuZ2V0RWxlbWVudEJ5SWQoJ21heC1wcmljZScpIGFzIEhUTUxJbnB1dEVsZW1lbnQpLnZhbHVlXG4gICAgfVxuICAgIC8vIGNvbnNvbGUubG9nKGRhdGEuY2l0eSwgZGF0YS5jaGVja0luRGF0ZSwgZGF0YS5jaGVja091dERhdGUsIGRhdGEubWF4UHJpY2UpXG4gICAgc2VhcmNoKGRhdGEpXG4gIH1cbiAgXG4gIGZ1bmN0aW9uIHNlYXJjaCAoZGF0YTogU2VhcmNoRm9ybURhdGEpIHtcbiAgICBjb25zb2xlLmxvZyhkYXRhKVxuICB9XG59KVxuXG4iXX0=